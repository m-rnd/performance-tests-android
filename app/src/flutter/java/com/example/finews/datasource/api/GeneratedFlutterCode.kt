// Autogenerated from Pigeon (v8.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
package com.example.finews.datasource.api

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any> {
  return listOf<Any>(
    exception.javaClass.simpleName,
    exception.toString(),
    "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
  )
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterApiNewsEntity (
  val title: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterApiNewsEntity {
      val title = list[0] as? String
      return FlutterApiNewsEntity(title)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      title,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object FlutterNewsApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterApiNewsEntity.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is FlutterApiNewsEntity -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class FlutterNewsApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by FlutterNewsApi. */
    val codec: MessageCodec<Any?> by lazy {
      FlutterNewsApiCodec
    }
  }
  fun getNews(callback: (List<FlutterApiNewsEntity>) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.FlutterNewsApi.getNews", codec)
    channel.send(null) {
      val result = it as List<FlutterApiNewsEntity>
      callback(result)
    }
  }
}
